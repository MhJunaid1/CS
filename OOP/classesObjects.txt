In object-oriented programming, a class is a blueprint or template for creating objects.
It defines a set of attributes (data) and behaviors (methods) that the objects created from the class will have.
A class serves as a blueprint for creating multiple instances of objects with similar characteristics.

An object, on the other hand, is an instance of a class. It is a tangible or concrete entity that represents
a specific occurrence or realization of the class. Objects have state (data) and behavior (methods) defined by the class they belong to.

In simpler terms, a class can be thought of as a blueprint for creating objects, and an object is an instance of that class.
Classes define the structure and behavior, while objects represent the actual entities or instances that exist in memory during the execution of a program.

For example, consider a class called "Car." The Car class would define the attributes of a car (such as color, model, and year)
and the behaviors it can perform (such as accelerating, braking, and changing gears). An object of the Car class would be a specific car instance, such as a red Ford Mustang from 2019.
