DATA STRUCTURES
Data structures can be broadly categorized into two types:

PRIMITIVE VS NON-PRIMITIVE DATA STRUCTURES
Primitive Data Structures: These are basic data structures that are directly operated by the machine instructions.
Examples of primitive data structures include integers, floats, characters, and pointers.
Abstract Data Structures(Non-Primitive): These are derived data structures that are built on top of primitive data structures.
Examples of abstract data structures include arrays, stacks, queues, linked lists, trees, graphs, hash tables, and heaps.

LINEAR VS NON-LINEAR DATA STRUCTURES
Linear data structures are those in which the data elements are arranged in a sequential order and each element has a unique predecessor and successor
except for the first and last elements. Examples of linear data structures include arrays, linked lists, stacks, and queues.
On the other hand, non-linear data structures are those in which the data elements are not arranged in a sequential order.
Instead, each element may have one or more direct successors or predecessors. Examples of non-linear data structures include trees, graphs, and heaps.

ASSOCIATIVE ARRAYS
Associative arrays, also known as maps, dictionaries, or hash tables, are a type of data structure that allow you to store key-value pairs.
Unlike arrays, which are indexed using integers, associative arrays use keys to access the values stored in them.
This allows you to quickly search, insert, and delete items based on their keys.
Some common operations on associative arrays include:
Inserting a key-value pair
Retrieving the value associated with a given key
Removing a key-value pair
Checking if a key is present in the array
Iterating over all the key-value pairs in the array

STACKS
A stack is an abstract data type that follows the Last-In-First-Out (LIFO) principle.
It means the last element that is inserted into the stack will be the first element to be removed.
The two main operations that can be performed on a stack are push and pop.
The push operation adds an element to the top of the stack, and the pop operation removes the element from the top of the stack.
We can also perform a peek operation that returns the value of the top element in the stack without removing it.

QUEUES
A queue is a linear data structure that follows the FIFO (First In First Out) principle, meaning the element that is added first will be removed first.
A queue can be visualized as a line of people waiting for something, where the first person to enter is the first to leave.
The basic operations in a queue are:
Enqueue: This operation adds an element to the back of the queue.
Dequeue: This operation removes the element from the front of the queue.
Peek/Front: This operation returns the element at the front of the queue without removing it.
isEmpty: This operation checks whether the queue is empty or not.

LINKED LISTS
A linked list is a linear data structure consisting of a sequence of nodes, where each node contains a piece of data and a reference (or pointer)
to the next node in the sequence. Unlike arrays, linked lists do not have a fixed size, and new nodes can be easily added or removed from the list.
The basic operations performed on a linked list are:
Insertion: This operation involves adding a new node to the list. The new node can be inserted at the beginning, end, or any other position in the list.
Deletion: This operation involves removing a node from the list. The node to be removed can be at the beginning, end, or any other position in the list.
Traversal: This operation involves accessing each node in the list, one by one, in order to perform some action on it (such as printing its data).
Searching: This operation involves finding a specific node in the list based on some search criteria (such as its data value).
Sorting: This operation involves arranging the nodes in the list in some specific order (such as ascending or descending order).
