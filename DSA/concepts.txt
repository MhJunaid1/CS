DATA STRUCTURES
Data structures can be broadly categorized into two types:

PRIMITIVE VS NON-PRIMITIVE DATA STRUCTURES
Primitive Data Structures: These are basic data structures that are directly operated by the machine instructions.
Examples of primitive data structures include integers, floats, characters, and pointers.
Abstract Data Structures(Non-Primitive): These are derived data structures that are built on top of primitive data structures.
Examples of abstract data structures include arrays, stacks, queues, linked lists, trees, graphs, hash tables, and heaps.

LINEAR VS NON-LINEAR DATA STRUCTURES
Linear data structures are those in which the data elements are arranged in a sequential order and each element has a unique predecessor and successor
except for the first and last elements. Examples of linear data structures include arrays, linked lists, stacks, and queues.
On the other hand, non-linear data structures are those in which the data elements are not arranged in a sequential order.
Instead, each element may have one or more direct successors or predecessors. Examples of non-linear data structures include trees, graphs, and heaps.

ASSOCIATIVE ARRAYS
Associative arrays, also known as maps, dictionaries, or hash tables, are a type of data structure that allow you to store key-value pairs.
Unlike arrays, which are indexed using integers, associative arrays use keys to access the values stored in them.
This allows you to quickly search, insert, and delete items based on their keys.
Some common operations on associative arrays include:
Inserting a key-value pair
Retrieving the value associated with a given key
Removing a key-value pair
Checking if a key is present in the array
Iterating over all the key-value pairs in the array

STACKS
A stack is an abstract data type that follows the Last-In-First-Out (LIFO) principle.
It means the last element that is inserted into the stack will be the first element to be removed.
The two main operations that can be performed on a stack are push and pop.
The push operation adds an element to the top of the stack, and the pop operation removes the element from the top of the stack.
We can also perform a peek operation that returns the value of the top element in the stack without removing it.

QUEUES
A queue is a linear data structure that follows the FIFO (First In First Out) principle, meaning the element that is added first will be removed first.
A queue can be visualized as a line of people waiting for something, where the first person to enter is the first to leave.
The basic operations in a queue are:
Enqueue: This operation adds an element to the back of the queue.
Dequeue: This operation removes the element from the front of the queue.
Peek/Front: This operation returns the element at the front of the queue without removing it.
isEmpty: This operation checks whether the queue is empty or not.

LINKED LISTS
A linked list is a linear data structure consisting of a sequence of nodes, where each node contains a piece of data and a reference (or pointer)
to the next node in the sequence. Unlike arrays, linked lists do not have a fixed size, and new nodes can be easily added or removed from the list.
The basic operations performed on a linked list are:
Insertion: This operation involves adding a new node to the list. The new node can be inserted at the beginning, end, or any other position in the list.
Deletion: This operation involves removing a node from the list. The node to be removed can be at the beginning, end, or any other position in the list.
Traversal: This operation involves accessing each node in the list, one by one, in order to perform some action on it (such as printing its data).
Searching: This operation involves finding a specific node in the list based on some search criteria (such as its data value).
Sorting: This operation involves arranging the nodes in the list in some specific order (such as ascending or descending order).
They are particularly useful when the size of the collection is not known in advance, or when items are frequently added or removed.

TREE
A tree is a non-linear data structure that consists of a collection of nodes, where each node has a parent node (except the root node) and zero or more child nodes.
Trees are commonly used to represent hierarchical relationships between elements, such as in file systems or organization charts. Some commonly used types of trees are:

Binary Tree: A binary tree is a type of tree in which each node can have at most two child nodes, referred to as the left child and the right child.
Binary trees are commonly used in computer science, particularly in algorithms and data structures.

Binary Search Tree (BST): A binary search tree is a type of binary tree in which every node's left child has a value smaller than the node's value, and
every right child has a value greater than the node's value. This property makes searching, insertion, and deletion operations efficient, as they
can be performed in O(log n) time.

AVL Tree: An AVL tree is a self-balancing binary search tree in which the heights of the left and right subtrees of any node differ by at most one.
This ensures that the tree is always balanced and searching, insertion, and deletion operations can be performed in O(log n) time.

Heap: A heap is a special type of binary tree in which the value of each node is greater than or equal to (in a max heap) or less than or equal
to (in a min heap) the values of its children. Heaps are commonly used in algorithms, such as heap sort and priority queues.

The usage of these trees varies based on their properties and applications. For example, binary trees are used to represent arithmetic expressions,
while BSTs are used for efficient searching, AVL trees are used in databases and data processing, and heaps are used for sorting and efficient priority queues.

HASH
A hash table is a data structure that stores data in an associative array format, where each element in the array is identified by a unique key or hash value.
It uses a hash function to map the keys to a particular index or location in an array, where the corresponding value is stored.
This allows for efficient retrieval, insertion, and deletion of data.

Hash tables are commonly used in computer programming for various purposes, such as in implementing database indexing, caching, symbol tables, and various algorithms.

Some of the key features of a hash table include:

Hash function: It maps the keys to a particular index in the array.

Collision resolution: When two or more keys have the same hash value, the collision resolution technique is used to resolve the conflict.

Load factor: It is the ratio of the number of elements stored in the hash table to the number of slots in the table.

Rehashing: It involves creating a new hash table and reinserting all the elements into it when the load factor exceeds a certain threshold.

Dynamic resizing: It involves increasing or decreasing the size of the hash table dynamically to optimize its performance.

Usage of Hash Tables:
Hash tables are widely used in computer programming for various purposes. Some of the common applications of hash tables include:

Database indexing: In databases, hash tables are used to create indexes for faster searching and retrieval of data.

Caching: Hash tables are used in caching mechanisms to store frequently accessed data in memory for faster access.

Symbol tables: In programming languages, hash tables are used to implement symbol tables for storing variables and their values.

Algorithms: Hash tables are used in various algorithms such as finding duplicates, counting occurrences, and grouping similar items.

Password storage: Hash tables are used to securely store passwords by hashing them with a one-way hash function, making it difficult to reverse engineer
the original password.

In summary, hash tables are a powerful and widely used data structure in computer programming due to their efficient retrieval, insertion, and deletion of data.
They are used in various applications such as database indexing, caching, symbol tables, and algorithms.
